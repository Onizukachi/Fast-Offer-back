exit
Like.all
exit
Like.all
exit
Like.all
exit
Like.all
exit
Like.all
exit
Like.all
exit
Question.all
User.all
exit
Like.all
current_user.likes
exit
Like.all
exit
Like.all
current_user.likes
current_user
exit
Like.all
expect(response).to have_http_status(204)
user
Like.all
exit
Like.all
current_user.likes
exit
Like.all
current_user.likes
exit
current_user.likes.find_by!(likeable_id: params[:likeable_id], likeable_type: params[:likeable_type])
current_user.likes
exit
params
exit
like_params
params
exit
response.code
exit
response.code
exit
params
exit
params
exit
request.content_type
params
request.headers.to_a
exit
request.headers.to_a
request.headers
request
params
exit
params
like_params
exit
like_params
params
exit
request.raw_post()
request.query_parameters
request.
body
request.post
request.pos
request.get
request.authorization
request.params
request
params
exit
params
.permit(:likeable_id, :likeable_type)
      en
like_params
exit
params
exit
params
para,s
exit
params
exit
params
exit
params
exit
params
exit
current_user.likes.build(like_params)
exit
current_user.likes.build(like_params)
exit
response.status
user_signed_in?
user_singned_in?
current_user
exit
request.params
request.body
request
params
like_params
exit
response
response.
params
like_params
current_user
exit
request.headers.to_a
request
request.header
request.headers
response.status
exit
response.status
exit
authenticated_header(user)
response.status
json
exit
json
response.body
response.status
response
request
params
exit
current_user
exit
response
request.headers.to_a
request.headers
request
exit
Devise::JWT::TestHelpers.auth_headers(headers, Question.first)
Devise::JWT::TestHelpers.auth_headers(headers, User.first)
headers = { 'Accept' => 'application/json', 'Content-Type' => 'application/json' }
Devise::JWT::TestHelpers.auth_headers(User.first)
User.first
exit
response.code
json
exit
json
exit
json['error']
json['data']
json
response.body
exit
json
exit
json['data']
exit
json['data'].size
json['data']
exit
json
exit
new_question.body.sub(/^\d+\.\s+/, '')
new_question.body.sub(/^\d+\./, '')
new_question.body.sub(/^\d+/, '')
new_question.body.gub(/^\d+/, '')
new_question.body
new_question.save!
new_question.tag_list
new_question.tags
new_question.author
new_question.user
new_question
 new_question.tag_list.add curr_tag
          questions << new_question
          new_question = Question.new(author: User.first(2).last, body: raw_text, grade: ItGrade.find_by(grade: curr_grade))
        raw_text = curr_p.children.map(&:content).join(' ').squish
curr_tag
curr_p
exit
questions.last.body
questions.last(10).first.body
questions.last(10).first
questions.last(10)
questions.last
questions.first(20).last.tags
questions.first.tags
questions.first.grade
questions.first.author
questions.first.user
questions.first
questions
exit
Question
content[2].children.map(&:content).join(' ').squish.match?(/^\d/)
content[2].children.map(&:content).join(' ').squish.match(/^\d/)
content[2].children.map(&:content).join(' ').squish.match(/\d/)
content[2].children.map(&:content).join(' ').squish
content[2].children.map(&:content).join(' ').squish.start_with(/\w/)
content[2].children.map(&:content).join(' ').squish
content[2].children.map(&:content).join(' ')
content[2].children.map(&:content)
content[2].children.content
content[2].children.all?(&:text?)
content[2].children.all(&:text?)
content[2].text?
content[2].text>
content[2]
content[2].first
content[2].first.text?
content[2].children.first.text?
content[2].children.first.methods
content[2].children.first
content[2].children.size
content[2].children
content[2].content
content[2].at('strong').content
content[1].at('strong').inner_html
content[1].at('strong').content
content[1].at('strong').node_type
content[1].at('strong').methods
content[2].at('strong')
content[2].at('strong').inner_text
content[2].at('strong').text
content[2].at('strong')
content[1].at('strong')
content[1]
content.first.children.inner_text.strip.match?(/(#{grade_matcher.keys.join('|')})/)
/(#{grade_matcher.keys.join('|')})/
match?(/(#{grade_matcher.keys.join('|')})/)
grade_matcher.keys.
grade_matcher.keys.join('|')
match?(grade_matcher.keys.join('|'))
content.first.children.inner_text.strip.match?(grade_matcher.keys.join('|'))
content.first.children.inner_text.strip
    grade_matcher = { 'Junior' => 0, 'Middle' => 1, 'Senior' => 2 }
grade_matcher.keys.join('|')
content.first.children.inner_text.strip
content.first.children.inner_text
content.first.children.methods
content.first.children.innerText
content.first.children.methods
content.first.children.has
content.first.children
content.first.at('stong')
content.first
content = html_doc.css("div article p")[2..]
html_doc.css("div article p")[2..]
html_doc.css("div article p")[1]

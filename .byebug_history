exit
new_question.body.sub(/^\d+\.\s+/, '')
new_question.body.sub(/^\d+\./, '')
new_question.body.sub(/^\d+/, '')
new_question.body.gub(/^\d+/, '')
new_question.body
new_question.save!
new_question.tag_list
new_question.tags
new_question.author
new_question.user
new_question
 new_question.tag_list.add curr_tag
          questions << new_question
          new_question = Question.new(author: User.first(2).last, body: raw_text, grade: ItGrade.find_by(grade: curr_grade))
        raw_text = curr_p.children.map(&:content).join(' ').squish
curr_tag
curr_p
exit
questions.last.body
questions.last(10).first.body
questions.last(10).first
questions.last(10)
questions.last
questions.first(20).last.tags
questions.first.tags
questions.first.grade
questions.first.author
questions.first.user
questions.first
questions
exit
Question
content[2].children.map(&:content).join(' ').squish.match?(/^\d/)
content[2].children.map(&:content).join(' ').squish.match(/^\d/)
content[2].children.map(&:content).join(' ').squish.match(/\d/)
content[2].children.map(&:content).join(' ').squish
content[2].children.map(&:content).join(' ').squish.start_with(/\w/)
content[2].children.map(&:content).join(' ').squish
content[2].children.map(&:content).join(' ')
content[2].children.map(&:content)
content[2].children.content
content[2].children.all?(&:text?)
content[2].children.all(&:text?)
content[2].text?
content[2].text>
content[2]
content[2].first
content[2].first.text?
content[2].children.first.text?
content[2].children.first.methods
content[2].children.first
content[2].children.size
content[2].children
content[2].content
content[2].at('strong').content
content[1].at('strong').inner_html
content[1].at('strong').content
content[1].at('strong').node_type
content[1].at('strong').methods
content[2].at('strong')
content[2].at('strong').inner_text
content[2].at('strong').text
content[2].at('strong')
content[1].at('strong')
content[1]
content.first.children.inner_text.strip.match?(/(#{grade_matcher.keys.join('|')})/)
/(#{grade_matcher.keys.join('|')})/
match?(/(#{grade_matcher.keys.join('|')})/)
grade_matcher.keys.
grade_matcher.keys.join('|')
match?(grade_matcher.keys.join('|'))
content.first.children.inner_text.strip.match?(grade_matcher.keys.join('|'))
content.first.children.inner_text.strip
    grade_matcher = { 'Junior' => 0, 'Middle' => 1, 'Senior' => 2 }
grade_matcher.keys.join('|')
content.first.children.inner_text.strip
content.first.children.inner_text
content.first.children.methods
content.first.children.innerText
content.first.children.methods
content.first.children.has
content.first.children
content.first.at('stong')
content.first
content = html_doc.css("div article p")[2..]
html_doc.css("div article p")[2..]
html_doc.css("div article p")[1]
html_doc.css("div article p")[2]
html_doc.css("div article p")
html_doc.css("div article p)
html_doc.css("div[class='article-text'] ")
html_doc.css("div[class^='article-text'] ")
html_doc.css('articlehead div')
html_doc.css('articlehead div article p')
html_doc.at("p a[name='7afnfgjjny8h']")['name']
html_doc.at("a[name='7afnfgjjny8h']")['name']
html_doc.at("a[name='7afnfgjjny8h']")['value']
html_doc.at("a[name='7afnfgjjny8h']")['href']
html_doc.at("a[name='7afnfgjjny8h']").text
html_doc.at("a[name='7afnfgjjny8h']").href
html_doc.at("a[name='7afnfgjjny8h']").value
html_doc.at("a[name='7afnfgjjny8h']")
html_doc.at("a[name='7afnfgjjny8h']").
html_doc.at_css("a[name='7afnfgjjny8h']").
html_doc.css("a[name='7afnfgjjny8h']").href
html_doc.css("a[name='7afnfgjjny8h']").value
html_doc.css("a[name='7afnfgjjny8h']")
html_doc
exit
res.status
res.code
exit
uri
exit
res.body.include?('парадигма')
res.body
res.code
